2025-07-10 17:13:18,124 root INFO: Executing: DROP TABLE mydb.customers;
2025-07-10 17:13:18,124 root INFO: Executing SQL
2025-07-10 17:13:18,621 root WARNING: Ignoring error for statement: [Teradata][teradataml](TDML_2000) Failed to connect to Teradata Vantage.
2025-07-10 17:13:18,621 root INFO: Executing: DROP TABLE mydb.sales;
2025-07-10 17:13:18,621 root INFO: Executing SQL
2025-07-10 17:13:18,925 root WARNING: Ignoring error for statement: [Teradata][teradataml](TDML_2000) Failed to connect to Teradata Vantage.
2025-07-10 17:13:18,925 root INFO: Executing: CREATE TABLE mydb.customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 17:13:18,925 root INFO: Executing SQL
2025-07-10 17:13:19,212 root WARNING: Ignoring error for statement: [Teradata][teradataml](TDML_2000) Failed to connect to Teradata Vantage.
2025-07-10 17:13:19,212 root INFO: Executing: CREATE TABLE mydb.sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 17:13:19,212 root INFO: Executing SQL
2025-07-10 17:13:19,501 root WARNING: Ignoring error for statement: [Teradata][teradataml](TDML_2000) Failed to connect to Teradata Vantage.
2025-07-10 17:13:19,501 root INFO: Executing: INSERT INTO mydb.customers (customer_id, status) VALUES (1, 'Active'), (2, 'Pending'), (3, 'Inactive');
2025-07-10 17:13:19,501 root INFO: Executing SQL
2025-07-10 17:13:19,808 root WARNING: Ignoring error for statement: [Teradata][teradataml](TDML_2000) Failed to connect to Teradata Vantage.
2025-07-10 17:13:19,808 root INFO: Executing: INSERT INTO mydb.sales (customer_id, amount) VALUES (1, 50.00), (1, 150.00), (2, 75.00), (3, 0.00);
2025-07-10 17:13:19,808 root INFO: Executing SQL
2025-07-10 17:13:20,094 root WARNING: Ignoring error for statement: [Teradata][teradataml](TDML_2000) Failed to connect to Teradata Vantage.
2025-07-10 17:13:20,094 root INFO: Cleaning up DB connection
2025-07-10 17:13:20,094 root INFO: Test tables have been prepared.
2025-07-10 17:16:36,655 root INFO: Fetching data to DataFrame
2025-07-10 17:16:37,046 root INFO: Cleaning up DB connection
2025-07-10 17:16:50,764 root INFO: Fetching data to DataFrame
2025-07-10 17:16:51,084 root INFO: Cleaning up DB connection
2025-07-10 18:03:40,297 root INFO: Fetching data to DataFrame
2025-07-10 18:03:40,617 root INFO: Cleaning up DB connection
2025-07-10 18:04:17,566 root INFO: Fetching data to DataFrame
2025-07-10 18:04:18,460 root INFO: Cleaning up DB connection
2025-07-10 18:07:26,384 root INFO: Executing: DROP TABLE mydb.customers;
2025-07-10 18:07:26,385 root INFO: Executing SQL
2025-07-10 18:07:26,846 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1040] [Teradata Database] [Error 3802] Database 'mydb' does not exist.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:07:26,846 root INFO: Executing: DROP TABLE mydb.sales;
2025-07-10 18:07:26,846 root INFO: Executing SQL
2025-07-10 18:07:26,888 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1040] [Teradata Database] [Error 3802] Database 'mydb' does not exist.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:07:26,888 root INFO: Executing: CREATE TABLE mydb.customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 18:07:26,888 root INFO: Executing SQL
2025-07-10 18:07:26,928 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1040] [Teradata Database] [Error 3802] Database 'mydb' does not exist.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:07:26,929 root INFO: Executing: CREATE TABLE mydb.sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 18:07:26,929 root INFO: Executing SQL
2025-07-10 18:07:26,969 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1040] [Teradata Database] [Error 3802] Database 'mydb' does not exist.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:07:26,970 root INFO: Executing: INSERT INTO mydb.customers (customer_id, status) VALUES (1, 'Active'), (2, 'Pending'), (3, 'Inactive');
2025-07-10 18:07:26,970 root INFO: Executing SQL
2025-07-10 18:07:27,011 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1040] [Teradata Database] [Error 3706] Syntax error: expected something between ')' and ','.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:07:27,011 root INFO: Executing: INSERT INTO mydb.sales (customer_id, amount) VALUES (1, 50.00), (1, 150.00), (2, 75.00), (3, 0.00);
2025-07-10 18:07:27,011 root INFO: Executing SQL
2025-07-10 18:07:27,053 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1040] [Teradata Database] [Error 3706] Syntax error: expected something between ')' and ','.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:07:27,053 root INFO: Cleaning up DB connection
2025-07-10 18:07:27,122 root INFO: Test tables have been prepared.
2025-07-10 18:08:49,382 root INFO: Executing: DROP TABLE customers;
2025-07-10 18:08:49,382 root INFO: Executing SQL
2025-07-10 18:08:49,774 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1042] [Teradata Database] [Error 3807] Object 'customers' does not exist.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:08:49,774 root INFO: Executing: DROP TABLE sales;
2025-07-10 18:08:49,774 root INFO: Executing SQL
2025-07-10 18:08:49,816 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1042] [Teradata Database] [Error 3807] Object 'sales' does not exist.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:08:49,816 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 18:08:49,816 root INFO: Executing SQL
2025-07-10 18:08:49,958 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 18:08:49,958 root INFO: Executing SQL
2025-07-10 18:08:50,080 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active'), (2, 'Pending'), (3, 'Inactive');
2025-07-10 18:08:50,080 root INFO: Executing SQL
2025-07-10 18:08:50,121 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1042] [Teradata Database] [Error 3706] Syntax error: expected something between ')' and ','.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:08:50,122 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00), (1, 150.00), (2, 75.00), (3, 0.00);
2025-07-10 18:08:50,122 root INFO: Executing SQL
2025-07-10 18:08:50,163 root WARNING: Ignoring error for statement: [Version 20.0.0.32] [Session 1042] [Teradata Database] [Error 3706] Syntax error: expected something between ')' and ','.
 at gosqldriver/teradatasql.formatError ErrorUtil.go:85
 at gosqldriver/teradatasql.(*teradataConnection).formatDatabaseError ErrorUtil.go:223
 at gosqldriver/teradatasql.(*teradataConnection).makeChainedDatabaseError ErrorUtil.go:239
 at gosqldriver/teradatasql.(*teradataConnection).processErrorParcel TeradataConnection.go:816
 at gosqldriver/teradatasql.(*TeradataRows).processResponseBundle TeradataRows.go:2494
 at gosqldriver/teradatasql.(*TeradataRows).executeSQLRequest TeradataRows.go:970
 at gosqldriver/teradatasql.newTeradataRows TeradataRows.go:791
 at gosqldriver/teradatasql.(*teradataStatement).QueryContext TeradataStatement.go:122
 at gosqldriver/teradatasql.(*teradataConnection).QueryContext TeradataConnection.go:1335
 at database/sql.ctxDriverQuery ctxutil.go:48
 at database/sql.(*DB).queryDC.func1 sql.go:1786
 at database/sql.withLock sql.go:3574
 at database/sql.(*DB).queryDC sql.go:1781
 at database/sql.(*Conn).QueryContext sql.go:2037
 at main.createRows goside.go:1080
 at main.goCreateRows goside.go:959
 at _cgoexp_ff5e33a08e40_goCreateRows _cgo_gotypes.go:417
 at runtime.cgocallbackg1 cgocall.go:446
 at runtime.cgocallbackg cgocall.go:350
 at runtime.cgocallback asm_amd64.s:1084
 at runtime.goexit asm_amd64.s:1700
2025-07-10 18:08:50,163 root INFO: Cleaning up DB connection
2025-07-10 18:08:50,212 root INFO: Test tables have been prepared.
2025-07-10 18:09:15,570 root INFO: Executing: DROP TABLE customers;
2025-07-10 18:09:15,570 root INFO: Executing SQL
2025-07-10 18:09:16,064 root INFO: Executing: DROP TABLE sales;
2025-07-10 18:09:16,064 root INFO: Executing SQL
2025-07-10 18:09:16,227 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 18:09:16,227 root INFO: Executing SQL
2025-07-10 18:09:16,390 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 18:09:16,390 root INFO: Executing SQL
2025-07-10 18:09:16,532 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active');
2025-07-10 18:09:16,532 root INFO: Executing SQL
2025-07-10 18:09:16,594 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (2, 'Pending');
2025-07-10 18:09:16,594 root INFO: Executing SQL
2025-07-10 18:09:16,656 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (3, 'Inactive');
2025-07-10 18:09:16,656 root INFO: Executing SQL
2025-07-10 18:09:16,717 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00);
2025-07-10 18:09:16,717 root INFO: Executing SQL
2025-07-10 18:09:16,779 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 150.00);
2025-07-10 18:09:16,779 root INFO: Executing SQL
2025-07-10 18:09:16,841 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (2, 75.00);
2025-07-10 18:09:16,841 root INFO: Executing SQL
2025-07-10 18:09:16,902 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (3, 0.00);
2025-07-10 18:09:16,902 root INFO: Executing SQL
2025-07-10 18:09:16,964 root INFO: Cleaning up DB connection
2025-07-10 18:09:17,018 root INFO: Test tables have been prepared.
2025-07-10 18:09:42,668 root INFO: Executing eligibility SQL statement
2025-07-10 18:09:42,668 root INFO: Executing SQL
2025-07-10 18:09:43,211 root INFO: Executing eligibility SQL statement
2025-07-10 18:09:43,211 root INFO: Executing SQL
2025-07-10 18:10:40,369 root INFO: Executing eligibility SQL statement
2025-07-10 18:10:40,370 root INFO: Executing SQL
2025-07-10 18:11:03,012 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:11:03,012 root INFO: Executing SQL
2025-07-10 18:11:03,516 root INFO: Executing eligibility SQL statement
2025-07-10 18:11:03,517 root INFO: Executing SQL
2025-07-10 18:11:03,719 root INFO: Executing eligibility SQL statement
2025-07-10 18:11:03,719 root INFO: Executing SQL
2025-07-10 18:11:03,760 root INFO: Executing eligibility SQL statement
2025-07-10 18:11:03,760 root INFO: Executing SQL
2025-07-10 18:11:03,805 root INFO: Executing waterfall full SQL
2025-07-10 18:11:03,805 root INFO: Fetching data to DataFrame
2025-07-10 18:12:33,301 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:12:33,301 root INFO: Executing SQL
2025-07-10 18:12:33,868 root INFO: Executing eligibility SQL statement
2025-07-10 18:12:33,868 root INFO: Executing SQL
2025-07-10 18:12:34,071 root INFO: Executing eligibility SQL statement
2025-07-10 18:12:34,071 root INFO: Executing SQL
2025-07-10 18:12:34,111 root INFO: Executing eligibility SQL statement
2025-07-10 18:12:34,111 root INFO: Executing SQL
2025-07-10 18:12:34,156 root INFO: Executing waterfall full SQL
2025-07-10 18:12:34,156 root INFO: Fetching data to DataFrame
2025-07-10 18:15:35,661 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:15:35,661 root INFO: Executing SQL
2025-07-10 18:15:36,162 root INFO: Executing eligibility SQL statement
2025-07-10 18:15:36,162 root INFO: Executing SQL
2025-07-10 18:15:36,344 root INFO: Executing eligibility SQL statement
2025-07-10 18:15:36,345 root INFO: Executing SQL
2025-07-10 18:15:36,385 root INFO: Executing eligibility SQL statement
2025-07-10 18:15:36,385 root INFO: Executing SQL
2025-07-10 18:15:36,430 root INFO: Executing waterfall full SQL
2025-07-10 18:15:36,430 root INFO: Fetching data to DataFrame
2025-07-10 18:15:36,768 root INFO: Waterfall report saved to reports/waterfall/waterfall_eligibility_demo.xlsx
2025-07-10 18:15:36,768 root INFO: Running output SQL for channel email
2025-07-10 18:15:36,768 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:15:36,768 root INFO: Fetching data to DataFrame
2025-07-10 18:15:36,831 root INFO: Fetched 5 rows for channel email
2025-07-10 18:15:36,831 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:15:36,838 root INFO: Running output SQL for channel sms
2025-07-10 18:15:36,838 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:15:36,838 root INFO: Fetching data to DataFrame
2025-07-10 18:15:36,899 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:15:36,900 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:15:54,049 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:15:54,049 root INFO: Executing SQL
2025-07-10 18:15:54,558 root INFO: Executing eligibility SQL statement
2025-07-10 18:15:54,558 root INFO: Executing SQL
2025-07-10 18:15:54,760 root INFO: Executing eligibility SQL statement
2025-07-10 18:15:54,761 root INFO: Executing SQL
2025-07-10 18:15:54,802 root INFO: Executing eligibility SQL statement
2025-07-10 18:15:54,802 root INFO: Executing SQL
2025-07-10 18:15:54,847 root INFO: Executing waterfall full SQL
2025-07-10 18:15:54,847 root INFO: Fetching data to DataFrame
2025-07-10 18:15:55,102 root INFO: Waterfall report saved to reports/waterfall/waterfall_eligibility_demo.xlsx
2025-07-10 18:15:55,102 root INFO: Running output SQL for channel email
2025-07-10 18:15:55,102 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:15:55,102 root INFO: Fetching data to DataFrame
2025-07-10 18:15:55,164 root INFO: Fetched 5 rows for channel email
2025-07-10 18:15:55,165 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:15:55,166 root INFO: Running output SQL for channel sms
2025-07-10 18:15:55,166 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:15:55,166 root INFO: Fetching data to DataFrame
2025-07-10 18:15:55,228 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:15:55,228 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:15:55,238 root INFO: Cleaning up DB connection
2025-07-10 18:22:10,408 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:22:10,409 root INFO: Executing SQL
2025-07-10 18:22:11,033 root INFO: Executing eligibility SQL statement
2025-07-10 18:22:11,033 root INFO: Executing SQL
2025-07-10 18:22:11,215 root INFO: Executing eligibility SQL statement
2025-07-10 18:22:11,215 root INFO: Executing SQL
2025-07-10 18:22:11,257 root INFO: Executing eligibility SQL statement
2025-07-10 18:22:11,257 root INFO: Executing SQL
2025-07-10 18:22:11,303 root INFO: Executing waterfall full SQL
2025-07-10 18:22:11,303 root INFO: Fetching data to DataFrame
2025-07-10 18:22:11,655 root INFO: Waterfall report saved to reports/waterfall/waterfall_eligibility_demo.xlsx
2025-07-10 18:22:11,655 root INFO: Running output SQL for channel email
2025-07-10 18:22:11,655 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:22:11,655 root INFO: Fetching data to DataFrame
2025-07-10 18:22:11,717 root INFO: Fetched 5 rows for channel email
2025-07-10 18:22:11,717 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:22:11,726 root INFO: Running output SQL for channel sms
2025-07-10 18:22:11,727 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:22:11,727 root INFO: Fetching data to DataFrame
2025-07-10 18:22:11,769 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:22:11,769 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:22:11,791 root INFO: Cleaning up DB connection
2025-07-10 18:39:59,624 root INFO: Executing: DROP TABLE customers;
2025-07-10 18:39:59,624 root INFO: Executing SQL
2025-07-10 18:40:00,147 root INFO: Executing: DROP TABLE sales;
2025-07-10 18:40:00,147 root INFO: Executing SQL
2025-07-10 18:40:00,289 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 18:40:00,289 root INFO: Executing SQL
2025-07-10 18:40:00,411 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 18:40:00,411 root INFO: Executing SQL
2025-07-10 18:40:00,533 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active');
2025-07-10 18:40:00,533 root INFO: Executing SQL
2025-07-10 18:40:00,574 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (2, 'Pending');
2025-07-10 18:40:00,574 root INFO: Executing SQL
2025-07-10 18:40:00,615 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (3, 'Inactive');
2025-07-10 18:40:00,615 root INFO: Executing SQL
2025-07-10 18:40:00,656 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00);
2025-07-10 18:40:00,656 root INFO: Executing SQL
2025-07-10 18:40:00,718 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 150.00);
2025-07-10 18:40:00,718 root INFO: Executing SQL
2025-07-10 18:40:00,758 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (2, 75.00);
2025-07-10 18:40:00,758 root INFO: Executing SQL
2025-07-10 18:40:00,800 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (3, 0.00);
2025-07-10 18:40:00,800 root INFO: Executing SQL
2025-07-10 18:40:00,862 root INFO: Cleaning up DB connection
2025-07-10 18:40:00,907 root INFO: Test tables have been prepared.
2025-07-10 18:40:07,675 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:40:07,675 root INFO: Executing SQL
2025-07-10 18:40:08,233 root INFO: Executing eligibility SQL statement
2025-07-10 18:40:08,233 root INFO: Executing SQL
2025-07-10 18:40:08,435 root INFO: Executing eligibility SQL statement
2025-07-10 18:40:08,436 root INFO: Executing SQL
2025-07-10 18:40:08,477 root INFO: Executing eligibility SQL statement
2025-07-10 18:40:08,477 root INFO: Executing SQL
2025-07-10 18:40:08,522 root INFO: Executing waterfall SQL for grouping customer_id
2025-07-10 18:40:08,522 root INFO: Fetching data to DataFrame
2025-07-10 18:40:08,780 root INFO: Waterfall report saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 18:40:08,780 root INFO: Running output SQL for channel email
2025-07-10 18:40:08,780 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:40:08,780 root INFO: Fetching data to DataFrame
2025-07-10 18:40:08,842 root INFO: Fetched 5 rows for channel email
2025-07-10 18:40:08,842 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:40:08,843 root INFO: Running output SQL for channel sms
2025-07-10 18:40:08,843 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:40:08,843 root INFO: Fetching data to DataFrame
2025-07-10 18:40:08,905 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:40:08,905 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:40:08,911 root INFO: Cleaning up DB connection
2025-07-10 18:47:26,107 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:47:26,108 root INFO: Executing SQL
2025-07-10 18:47:26,757 root INFO: Executing eligibility SQL statement
2025-07-10 18:47:26,757 root INFO: Executing SQL
2025-07-10 18:47:26,959 root INFO: Executing eligibility SQL statement
2025-07-10 18:47:26,960 root INFO: Executing SQL
2025-07-10 18:47:27,000 root INFO: Executing eligibility SQL statement
2025-07-10 18:47:27,001 root INFO: Executing SQL
2025-07-10 18:47:27,045 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 18:47:27,045 root INFO: Fetching data to DataFrame
2025-07-10 18:47:27,279 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 18:47:27,279 root INFO: Fetching data to DataFrame
2025-07-10 18:47:27,382 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 18:47:27,382 root INFO: Fetching data to DataFrame
2025-07-10 18:47:27,629 root INFO: Waterfall report with channels saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 18:47:27,629 root INFO: Running output SQL for channel email
2025-07-10 18:47:27,629 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:47:27,629 root INFO: Fetching data to DataFrame
2025-07-10 18:47:27,692 root INFO: Fetched 5 rows for channel email
2025-07-10 18:47:27,692 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:47:27,700 root INFO: Running output SQL for channel sms
2025-07-10 18:47:27,700 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:47:27,700 root INFO: Fetching data to DataFrame
2025-07-10 18:47:27,762 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:47:27,763 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:47:27,793 root INFO: Cleaning up DB connection
2025-07-10 18:52:59,355 root INFO: Executing: DROP TABLE customers;
2025-07-10 18:52:59,355 root INFO: Executing SQL
2025-07-10 18:52:59,880 root INFO: Executing: DROP TABLE sales;
2025-07-10 18:52:59,880 root INFO: Executing SQL
2025-07-10 18:53:00,024 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 18:53:00,024 root INFO: Executing SQL
2025-07-10 18:53:00,145 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 18:53:00,145 root INFO: Executing SQL
2025-07-10 18:53:00,287 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active');
2025-07-10 18:53:00,287 root INFO: Executing SQL
2025-07-10 18:53:00,349 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (2, 'Pending');
2025-07-10 18:53:00,349 root INFO: Executing SQL
2025-07-10 18:53:00,411 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (3, 'Inactive');
2025-07-10 18:53:00,411 root INFO: Executing SQL
2025-07-10 18:53:00,472 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00);
2025-07-10 18:53:00,472 root INFO: Executing SQL
2025-07-10 18:53:00,533 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 150.00);
2025-07-10 18:53:00,533 root INFO: Executing SQL
2025-07-10 18:53:00,595 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (2, 75.00);
2025-07-10 18:53:00,595 root INFO: Executing SQL
2025-07-10 18:53:00,657 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (3, 0.00);
2025-07-10 18:53:00,657 root INFO: Executing SQL
2025-07-10 18:53:00,718 root INFO: Cleaning up DB connection
2025-07-10 18:53:00,817 root INFO: Test tables have been prepared.
2025-07-10 18:53:10,104 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:53:10,104 root INFO: Executing SQL
2025-07-10 18:53:10,704 root INFO: Executing eligibility SQL statement
2025-07-10 18:53:10,704 root INFO: Executing SQL
2025-07-10 18:53:10,928 root INFO: Executing eligibility SQL statement
2025-07-10 18:53:10,928 root INFO: Executing SQL
2025-07-10 18:53:10,969 root INFO: Executing eligibility SQL statement
2025-07-10 18:53:10,969 root INFO: Executing SQL
2025-07-10 18:53:11,014 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 18:53:11,014 root INFO: Fetching data to DataFrame
2025-07-10 18:53:11,248 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 18:53:11,248 root INFO: Fetching data to DataFrame
2025-07-10 18:53:11,372 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 18:53:11,372 root INFO: Fetching data to DataFrame
2025-07-10 18:53:11,604 root INFO: Waterfall report with channels saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 18:53:11,604 root INFO: Running output SQL for channel email
2025-07-10 18:53:11,604 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:53:11,604 root INFO: Fetching data to DataFrame
2025-07-10 18:53:11,687 root INFO: Fetched 5 rows for channel email
2025-07-10 18:53:11,687 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:53:11,689 root INFO: Running output SQL for channel sms
2025-07-10 18:53:11,689 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:53:11,689 root INFO: Fetching data to DataFrame
2025-07-10 18:53:11,751 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:53:11,751 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:53:11,757 root INFO: Cleaning up DB connection
2025-07-10 18:59:34,446 root INFO: Dropping existing table eligibility_demo
2025-07-10 18:59:34,446 root INFO: Executing SQL
2025-07-10 18:59:35,095 root INFO: Executing eligibility SQL statement
2025-07-10 18:59:35,095 root INFO: Executing SQL
2025-07-10 18:59:35,297 root INFO: Executing eligibility SQL statement
2025-07-10 18:59:35,298 root INFO: Executing SQL
2025-07-10 18:59:35,338 root INFO: Executing eligibility SQL statement
2025-07-10 18:59:35,338 root INFO: Executing SQL
2025-07-10 18:59:35,384 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 18:59:35,384 root INFO: Fetching data to DataFrame
2025-07-10 18:59:35,629 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 18:59:35,629 root INFO: Fetching data to DataFrame
2025-07-10 18:59:35,732 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 18:59:35,733 root INFO: Fetching data to DataFrame
2025-07-10 18:59:35,930 root INFO: Waterfall report with channels saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 18:59:35,931 root INFO: Running output SQL for channel email
2025-07-10 18:59:35,931 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 18:59:35,931 root INFO: Fetching data to DataFrame
2025-07-10 18:59:35,993 root INFO: Fetched 5 rows for channel email
2025-07-10 18:59:35,993 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 18:59:35,995 root INFO: Running output SQL for channel sms
2025-07-10 18:59:35,995 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 18:59:35,995 root INFO: Fetching data to DataFrame
2025-07-10 18:59:36,057 root INFO: Fetched 5 rows for channel sms
2025-07-10 18:59:36,057 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 18:59:36,078 root INFO: Cleaning up DB connection
2025-07-10 19:00:57,195 root INFO: Executing: DROP TABLE customers;
2025-07-10 19:00:57,196 root INFO: Executing SQL
2025-07-10 19:00:57,733 root INFO: Executing: DROP TABLE sales;
2025-07-10 19:00:57,733 root INFO: Executing SQL
2025-07-10 19:00:57,875 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 19:00:57,875 root INFO: Executing SQL
2025-07-10 19:00:57,976 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 19:00:57,976 root INFO: Executing SQL
2025-07-10 19:00:58,098 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active');
2025-07-10 19:00:58,098 root INFO: Executing SQL
2025-07-10 19:00:58,160 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (2, 'Pending');
2025-07-10 19:00:58,160 root INFO: Executing SQL
2025-07-10 19:00:58,201 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (3, 'Inactive');
2025-07-10 19:00:58,201 root INFO: Executing SQL
2025-07-10 19:00:58,262 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00);
2025-07-10 19:00:58,262 root INFO: Executing SQL
2025-07-10 19:00:58,323 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 150.00);
2025-07-10 19:00:58,323 root INFO: Executing SQL
2025-07-10 19:00:58,384 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (2, 75.00);
2025-07-10 19:00:58,384 root INFO: Executing SQL
2025-07-10 19:00:58,425 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (3, 0.00);
2025-07-10 19:00:58,425 root INFO: Executing SQL
2025-07-10 19:00:58,487 root INFO: Cleaning up DB connection
2025-07-10 19:00:58,532 root INFO: Test tables have been prepared.
2025-07-10 19:01:07,316 root INFO: Dropping existing table eligibility_demo
2025-07-10 19:01:07,316 root INFO: Executing SQL
2025-07-10 19:01:07,774 root INFO: Executing eligibility SQL statement
2025-07-10 19:01:07,774 root INFO: Executing SQL
2025-07-10 19:01:07,998 root INFO: Executing eligibility SQL statement
2025-07-10 19:01:07,998 root INFO: Executing SQL
2025-07-10 19:01:08,039 root INFO: Executing eligibility SQL statement
2025-07-10 19:01:08,039 root INFO: Executing SQL
2025-07-10 19:01:08,084 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 19:01:08,084 root INFO: Fetching data to DataFrame
2025-07-10 19:01:08,323 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 19:01:08,323 root INFO: Fetching data to DataFrame
2025-07-10 19:01:08,427 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 19:01:08,427 root INFO: Fetching data to DataFrame
2025-07-10 19:07:13,386 root INFO: Executing: DROP TABLE customers;
2025-07-10 19:07:13,387 root INFO: Executing SQL
2025-07-10 19:07:13,995 root INFO: Executing: DROP TABLE sales;
2025-07-10 19:07:13,995 root INFO: Executing SQL
2025-07-10 19:07:14,138 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 19:07:14,138 root INFO: Executing SQL
2025-07-10 19:07:14,239 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 19:07:14,240 root INFO: Executing SQL
2025-07-10 19:07:14,361 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active');
2025-07-10 19:07:14,361 root INFO: Executing SQL
2025-07-10 19:07:14,403 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (2, 'Pending');
2025-07-10 19:07:14,403 root INFO: Executing SQL
2025-07-10 19:07:14,464 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (3, 'Inactive');
2025-07-10 19:07:14,464 root INFO: Executing SQL
2025-07-10 19:07:14,505 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00);
2025-07-10 19:07:14,505 root INFO: Executing SQL
2025-07-10 19:07:14,566 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 150.00);
2025-07-10 19:07:14,566 root INFO: Executing SQL
2025-07-10 19:07:14,628 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (2, 75.00);
2025-07-10 19:07:14,628 root INFO: Executing SQL
2025-07-10 19:07:14,669 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (3, 0.00);
2025-07-10 19:07:14,669 root INFO: Executing SQL
2025-07-10 19:07:14,711 root INFO: Cleaning up DB connection
2025-07-10 19:07:14,758 root INFO: Test tables have been prepared.
2025-07-10 19:07:24,028 root INFO: Dropping existing table eligibility_demo
2025-07-10 19:07:24,028 root INFO: Executing SQL
2025-07-10 19:07:24,565 root INFO: Executing eligibility SQL statement
2025-07-10 19:07:24,565 root INFO: Executing SQL
2025-07-10 19:07:24,788 root INFO: Executing eligibility SQL statement
2025-07-10 19:07:24,788 root INFO: Executing SQL
2025-07-10 19:07:24,830 root INFO: Executing eligibility SQL statement
2025-07-10 19:07:24,830 root INFO: Executing SQL
2025-07-10 19:07:24,875 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 19:07:24,875 root INFO: Fetching data to DataFrame
2025-07-10 19:07:25,108 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 19:07:25,108 root INFO: Fetching data to DataFrame
2025-07-10 19:07:25,231 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 19:07:25,231 root INFO: Fetching data to DataFrame
2025-07-10 19:07:25,464 root INFO: Waterfall report with channels saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 19:07:25,464 root INFO: Running output SQL for channel email
2025-07-10 19:07:25,464 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 19:07:25,464 root INFO: Fetching data to DataFrame
2025-07-10 19:07:25,526 root INFO: Fetched 5 rows for channel email
2025-07-10 19:07:25,526 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 19:07:25,535 root INFO: Running output SQL for channel sms
2025-07-10 19:07:25,535 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 19:07:25,535 root INFO: Fetching data to DataFrame
2025-07-10 19:07:25,596 root INFO: Fetched 5 rows for channel sms
2025-07-10 19:07:25,597 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 19:07:25,625 root INFO: Cleaning up DB connection
2025-07-10 19:19:08,600 root INFO: Dropping existing table eligibility_demo
2025-07-10 19:19:08,601 root INFO: Executing SQL
2025-07-10 19:19:09,336 root INFO: Executing eligibility SQL statement
2025-07-10 19:19:09,336 root INFO: Executing SQL
2025-07-10 19:19:09,558 root INFO: Executing eligibility SQL statement
2025-07-10 19:19:09,558 root INFO: Executing SQL
2025-07-10 19:19:09,599 root INFO: Executing eligibility SQL statement
2025-07-10 19:19:09,600 root INFO: Executing SQL
2025-07-10 19:19:09,645 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 19:19:09,645 root INFO: Fetching data to DataFrame
2025-07-10 19:19:09,893 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 19:19:09,894 root INFO: Fetching data to DataFrame
2025-07-10 19:19:10,017 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 19:19:10,017 root INFO: Fetching data to DataFrame
2025-07-10 19:19:10,257 root INFO: Waterfall report with channels saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 19:19:10,257 root INFO: Running output SQL for channel email
2025-07-10 19:19:10,257 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 19:19:10,257 root INFO: Fetching data to DataFrame
2025-07-10 19:19:10,328 root INFO: Fetched 2 rows for channel email
2025-07-10 19:19:10,329 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 19:19:10,331 root INFO: Running output SQL for channel sms
2025-07-10 19:19:10,332 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 19:19:10,332 root INFO: Fetching data to DataFrame
2025-07-10 19:19:10,393 root INFO: Fetched 2 rows for channel sms
2025-07-10 19:19:10,393 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 19:19:10,420 root INFO: Cleaning up DB connection
2025-07-10 19:23:20,794 root INFO: Executing: DROP TABLE customers;
2025-07-10 19:23:20,794 root INFO: Executing SQL
2025-07-10 19:23:21,244 root INFO: Executing: DROP TABLE sales;
2025-07-10 19:23:21,244 root INFO: Executing SQL
2025-07-10 19:23:21,386 root INFO: Executing: CREATE TABLE customers (customer_id INTEGER, status VARCHAR(20));
2025-07-10 19:23:21,386 root INFO: Executing SQL
2025-07-10 19:23:21,507 root INFO: Executing: CREATE TABLE sales (customer_id INTEGER, amount DECIMAL(10,2));
2025-07-10 19:23:21,507 root INFO: Executing SQL
2025-07-10 19:23:21,629 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (1, 'Active');
2025-07-10 19:23:21,629 root INFO: Executing SQL
2025-07-10 19:23:21,691 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (2, 'Pending');
2025-07-10 19:23:21,691 root INFO: Executing SQL
2025-07-10 19:23:21,732 root INFO: Executing: INSERT INTO customers (customer_id, status) VALUES (3, 'Inactive');
2025-07-10 19:23:21,732 root INFO: Executing SQL
2025-07-10 19:23:21,772 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 50.00);
2025-07-10 19:23:21,772 root INFO: Executing SQL
2025-07-10 19:23:21,813 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (1, 150.00);
2025-07-10 19:23:21,813 root INFO: Executing SQL
2025-07-10 19:23:21,854 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (2, 75.00);
2025-07-10 19:23:21,854 root INFO: Executing SQL
2025-07-10 19:23:21,895 root INFO: Executing: INSERT INTO sales (customer_id, amount) VALUES (3, 0.00);
2025-07-10 19:23:21,895 root INFO: Executing SQL
2025-07-10 19:23:21,937 root INFO: Cleaning up DB connection
2025-07-10 19:23:21,979 root INFO: Test tables have been prepared.
2025-07-10 19:23:22,276 root INFO: Fetching data to DataFrame
2025-07-10 19:23:22,678 root INFO: Cleaning up DB connection
2025-07-10 19:23:23,507 root INFO: Dropping existing table eligibility_demo
2025-07-10 19:23:23,507 root INFO: Executing SQL
2025-07-10 19:23:24,021 root INFO: Executing eligibility SQL statement
2025-07-10 19:23:24,022 root INFO: Executing SQL
2025-07-10 19:23:24,224 root INFO: Executing eligibility SQL statement
2025-07-10 19:23:24,224 root INFO: Executing SQL
2025-07-10 19:23:24,265 root INFO: Executing eligibility SQL statement
2025-07-10 19:23:24,265 root INFO: Executing SQL
2025-07-10 19:23:24,310 root INFO: Executing base waterfall SQL for grouping customer_id
2025-07-10 19:23:24,310 root INFO: Fetching data to DataFrame
2025-07-10 19:23:24,501 root INFO: Executing waterfall SQL for channel email, grouping customer_id
2025-07-10 19:23:24,501 root INFO: Fetching data to DataFrame
2025-07-10 19:23:24,605 root INFO: Executing waterfall SQL for channel sms, grouping customer_id
2025-07-10 19:23:24,605 root INFO: Fetching data to DataFrame
2025-07-10 19:23:24,788 root INFO: Waterfall report with channels saved to reports/waterfall/waterfall_eligibility_demo_customer_id.xlsx
2025-07-10 19:23:24,788 root INFO: Running output SQL for channel email
2025-07-10 19:23:24,788 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>0 THEN 1 ELSE 0 END AS has_any_sales,
  'EMAIL' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id
WHERE /* any channel-specific filter */ 1=1

2025-07-10 19:23:24,788 root INFO: Fetching data to DataFrame
2025-07-10 19:23:24,851 root INFO: Fetched 2 rows for channel email
2025-07-10 19:23:24,851 root INFO: Writing output file for channel email to reports/email/email_list.csv
2025-07-10 19:23:24,852 root INFO: Running output SQL for channel sms
2025-07-10 19:23:24,852 root DEBUG: SELECT
  c.customer_id,
  CASE WHEN s.amount>=100 THEN 1 ELSE 0 END AS large_sale,
  'SMS' AS channel
FROM eligibility_demo AS c
LEFT JOIN sales AS s ON s.customer_id = c.customer_id

2025-07-10 19:23:24,852 root INFO: Fetching data to DataFrame
2025-07-10 19:23:24,915 root INFO: Fetched 2 rows for channel sms
2025-07-10 19:23:24,915 root INFO: Writing output file for channel sms to reports/sms/sms_list.parquet
2025-07-10 19:23:24,920 root INFO: Cleaning up DB connection
ℹ️ [13:41:14] root INFO: Fetching data to DataFrame:
ℹ️ [13:41:14] root INFO: SELECT 1 AS test;
ℹ️ [13:41:14] root INFO: Fetched DataFrame with 1 rows and 1 columns in 0.55s
ℹ️ [13:41:14] root INFO: Cleaning up DB connection
