-- Jinja2 Template: waterfall_full.sql.j2
-- Purpose: Creates a standard, multi-step waterfall report for a given set of checks.
--
-- Context:
--   eligibility_table:      Name of the smart eligibility table.
--   unique_identifiers:     List of unique ID columns.
--   check_columns:          A list of the individual check column names to be evaluated in order.
--   pre_filter:             An optional, pre-existing WHERE clause to apply to the base population.
--
WITH base_population AS (
    SELECT *
    FROM {{ eligibility_table }} c
    {% if pre_filter %}
    WHERE {{ pre_filter }}
    {% endif %}
),
flags AS (
  SELECT
    {% for uid in unique_identifiers %}{{ uid.split('.')[-1] }}{{ "," if not loop.last }}{%- endfor %},
    {% for col in check_columns %}{{ col }}{{ "," if not loop.last }}{% endfor %}
  FROM base_population
)
SELECT
  stat_name,
  check_name,
  cntr
FROM (
    SELECT
      'initial_population' AS stat_name,
      'Total' AS check_name,
      COUNT(*) AS cntr
    FROM base_population

    UNION ALL

    -- Drop If Only This Scrub
    {%- for col in check_columns %}
    SELECT
      'unique_drops' AS stat_name,
      '{{ col }}' AS check_name,
      SUM(CASE WHEN {{ col }} = 0
               AND ( {%- for other in check_columns if other != col %}{{ other }} = 1{%- if not loop.last %} AND {% endif %}{% endfor %} )
               THEN 1 ELSE 0 END) AS cntr
    FROM flags
    {%- if not loop.last %}UNION ALL{% endif %}
    {%- endfor %}

    UNION ALL

    -- Drop Incremental
    {%- for col in check_columns %}
    SELECT
      'incremental_drops' AS stat_name,
      '{{ col }}' AS check_name,
      SUM(CASE WHEN {{ col }} = 0
               {%- for prev in check_columns[:loop.index0] %}AND {{ prev }} = 1 {%- endfor %}
               THEN 1 ELSE 0 END) AS cntr
    FROM flags
    {%- if not loop.last %}UNION ALL{% endif %}
    {%- endfor %}

    UNION ALL

    -- Drop Cumulative
    {%- for col in check_columns %}
    SELECT
      'cumulative_drops' AS stat_name,
      '{{ col }}' AS check_name,
      COUNT(*) - SUM(CASE WHEN {{ col }} = 1
                         {%- for prev in check_columns[:loop.index0] %}AND {{ prev }} = 1{%- endfor %}
                         THEN 1 ELSE 0 END) AS cntr
    FROM flags
    {%- if not loop.last %}UNION ALL{% endif %}
    {%- endfor %}

    UNION ALL

    -- Regain If No Scrub
    {%- for col in check_columns %}
    SELECT
      'regain' AS stat_name,
      '{{ col }}' AS check_name,
      SUM(CASE WHEN {{ col }} = 0
               AND ( {%- for other in check_columns if other != col %}{{ other }} = 1{%- if not loop.last %} AND {% endif %}{% endfor %} )
               THEN 1 ELSE 0 END) AS cntr
    FROM flags
    {%- if not loop.last %}UNION ALL{% endif %}
    {%- endfor %}

    UNION ALL

    -- Remaining
    {%- for col in check_columns %}
    SELECT
      'remaining' AS stat_name,
      '{{ col }}' AS check_name,
      SUM(CASE WHEN {{ col }} = 1
               {%- for prev in check_columns[:loop.index0] %}AND {{ prev }} = 1{%- endfor %}
               THEN 1 ELSE 0 END) AS cntr
    FROM flags
    {%- if not loop.last %}UNION ALL{% endif %}
    {%- endfor %}
) metrics;